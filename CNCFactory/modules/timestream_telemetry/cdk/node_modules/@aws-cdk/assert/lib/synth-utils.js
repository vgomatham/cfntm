"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynthUtils = void 0;
const fs = require("fs");
const path = require("path");
const core = require("aws-cdk-lib");
class SynthUtils {
    /**
     * Returns the cloud assembly template artifact for a stack.
     */
    static synthesize(stack, options = {}) {
        // always synthesize against the root (be it an App or whatever) so all artifacts will be included
        const assembly = synthesizeApp(stack, options);
        return stripNewStyleSynthCfnElements(assembly.getStackArtifact(stack.artifactId));
    }
    /**
     * Synthesizes the stack and returns the resulting CloudFormation template.
     */
    static toCloudFormation(stack, options = {}) {
        const synth = this._synthesizeWithNested(stack, options);
        if (isStackArtifact(synth)) {
            return synth.template;
        }
        else {
            return synth;
        }
    }
    /**
     * @returns Returns a subset of the synthesized CloudFormation template (only specific resource types).
     */
    static subset(stack, options) {
        const template = this.toCloudFormation(stack);
        if (template.Resources) {
            for (const [key, resource] of Object.entries(template.Resources)) {
                if (options.resourceTypes && !options.resourceTypes.includes(resource.Type)) {
                    delete template.Resources[key];
                }
            }
        }
        return template;
    }
    /**
     * Synthesizes the stack and returns a `CloudFormationStackArtifact` which can be inspected.
     * Supports nested stacks as well as normal stacks.
     *
     * @return CloudFormationStackArtifact for normal stacks or the actual template for nested stacks
     * @internal
     */
    static _synthesizeWithNested(stack, options = {}) {
        // always synthesize against the root (be it an App or whatever) so all artifacts will be included
        const assembly = synthesizeApp(stack, options);
        // if this is a nested stack (it has a parent), then just read the template as a string
        if (stack.nestedStackParent) {
            return JSON.parse(fs.readFileSync(path.join(assembly.directory, stack.templateFile)).toString('utf-8'));
        }
        return stripNewStyleSynthCfnElements(assembly.getStackArtifact(stack.artifactId));
    }
}
exports.SynthUtils = SynthUtils;
/**
 * Synthesizes the app in which a stack resides and returns the cloud assembly object.
 */
function synthesizeApp(stack, options) {
    const root = stack.node.root;
    if (!core.Stage.isStage(root)) {
        throw new Error('unexpected: all stacks must be part of a Stage or an App');
    }
    // to support incremental assertions (i.e. "expect(stack).toNotContainSomething(); doSomething(); expect(stack).toContainSomthing()")
    const force = true;
    return root.synth({
        force,
        ...options,
    });
}
function stripNewStyleSynthCfnElements(stackArtifact) {
    var _a, _b, _c, _d;
    const synthesizedTemplate = stackArtifact.template;
    // if new-style synthesis is not explicitly set, remove the extra generated Rule and Parameter from the synthesized template,
    // to avoid changing many tests that rely on the template being exactly what it is
    (_a = synthesizedTemplate === null || synthesizedTemplate === void 0 ? void 0 : synthesizedTemplate.Rules) === null || _a === void 0 ? true : delete _a.CheckBootstrapVersion;
    if (Object.keys((_b = synthesizedTemplate === null || synthesizedTemplate === void 0 ? void 0 : synthesizedTemplate.Rules) !== null && _b !== void 0 ? _b : {}).length === 0) {
        synthesizedTemplate === null || synthesizedTemplate === void 0 ? true : delete synthesizedTemplate.Rules;
    }
    (_c = synthesizedTemplate === null || synthesizedTemplate === void 0 ? void 0 : synthesizedTemplate.Parameters) === null || _c === void 0 ? true : delete _c.BootstrapVersion;
    if (Object.keys((_d = synthesizedTemplate === null || synthesizedTemplate === void 0 ? void 0 : synthesizedTemplate.Parameters) !== null && _d !== void 0 ? _d : {}).length === 0) {
        synthesizedTemplate === null || synthesizedTemplate === void 0 ? true : delete synthesizedTemplate.Parameters;
    }
    return stackArtifact;
}
function isStackArtifact(x) {
    return 'template' in x;
}
//# sourceMappingURL=data:application/json;base64,